'''
Train the classifier network by
samples generated by generator

- trainbyGen.py
train a classifier by online samples generated by generator.

- trainbyGenedSamples.py
train a classifier by offline samples generated by generator.
DDPM takes so much time to generate samples.
DDPM generates beforehand by imageGeneration.py
'''

import argparse
import torch.nn as nn

from modelsMNIST.GAN import *
from modelsMNIST.VAE import *
from modelsMNIST.DDPM import *

from models.mlp import *
from utils.util import test_img
from utils.getData import *
import copy

from torch.utils.data import DataLoader

parser = argparse.ArgumentParser()
parser.add_argument("--gen_n_epochs", type=int, default=20, help="number of epochs of training")
parser.add_argument("--n_epochs", type=int, default=50, help="number of epochs of training")
# parser.add_argument("--batch_size", type=int, default=32, help="size of the batches of generated samples")
parser.add_argument("--bs", type=int, default=128, help="size of the batches")
parser.add_argument("--local_bs", type=int, default=32, help="size of the batches for training")

parser.add_argument('--device_id', type=str, default='0')
parser.add_argument('--dataset', type=str, default='mnist') # stl10, cifar10, svhn, mnist
parser.add_argument('--gen', type=str, default='gan') # gan, vae, ddpm
parser.add_argument('--models', type=str, default='mlp') # cnn, mlp

parser.add_argument("--n_cpu", type=int, default=8, help="number of cpu threads to use during batch generation")

parser.add_argument("--latent_dim", type=int, default=100, help="dimensionality of the latent space") # GAN
parser.add_argument("--latent_size", type=int, default=20, help="dimensionality of the latent space") # VAE
parser.add_argument("--n_feat", type=int, default=128) # DDPM
parser.add_argument("--n_T", type=int, default=5) # DDPM

parser.add_argument("--n_classes", type=int, default=10, help="number of classes for dataset")
parser.add_argument("--img_size", type=int, default=28, help="size of each image dimension")
parser.add_argument("--channels", type=int, default=1, help="number of image channels")
parser.add_argument("--sample_interval", type=int, default=5, help="interval between image sampling")

parser.add_argument('--momentum', type=float, default=0)
parser.add_argument('--weight_decay', type=float, default=0)

parser.add_argument('--partial_data', type=float, default=0.01)
parser.add_argument('--rs', type=int, default=2, help='random seed')

args = parser.parse_args()
args.device = 'cuda:' + args.device_id
args.img_shape = (1, 28, 28)

torch.manual_seed(args.rs)
torch.cuda.manual_seed(args.rs)
torch.cuda.manual_seed_all(args.rs) # if use multi-GPU
np.random.seed(args.rs)
random.seed(args.rs)

lr = 1e-1 # MLP

if args.gen == 'gan':
    gennet = Generator(args).to(args.device)
    gennet.load_state_dict(torch.load('models/save/10_400gan_generator.pt'))
elif args.gen == 'vae':
    gennet = CVAE(args).to(args.device)
    gennet.load_state_dict(torch.load('models/save/10_400cvae.pt'))
elif args.gen == 'ddpm':
    gennet = DDPM(nn_model=ContextUnet(in_channels=1, n_feat=args.n_feat, n_classes=args.n_classes), betas=(1e-4, 0.02), n_T=400, device=args.device, drop_prob=0.1).to(args.device)
    gennet.load_state_dict(torch.load('models/save/1_100_ddpm.pt'))

net = MLP3().to(args.device)
loss_func = nn.CrossEntropyLoss()
dataset_train, dataset_test = getDataset(args)

dict_users = cifar_iid(dataset_train, int(1/args.partial_data), args.rs)
ldr_train = DataLoader(DatasetSplit(dataset_train, dict_users[0]), batch_size=args.local_bs, shuffle=True)

optimizer = torch.optim.SGD(net.parameters(), lr=lr, momentum=args.momentum, weight_decay=args.weight_decay)
batch_iter = len(dataset_train)//args.local_bs # MNIST

gen_epoch_loss = []
gennet.eval()
# print('gen sample iteration',self.iter)
for iter in range(1, args.gen_n_epochs+1): # train by samples generated by generator
    net.train()
    gen_batch_loss = []

    for i in range(batch_iter):
        with torch.no_grad():
            images, labels = gennet.sample_image(args) # images.shape (bs, feature^2)
        net.zero_grad()
        logits, log_probs = net(images)
        loss = F.cross_entropy(logits, labels) # net.fc1.weight.grad / net.fc5.weight.grad
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        gen_batch_loss.append(loss.item())
    gen_epoch_loss.append(sum(gen_batch_loss)/len(gen_batch_loss))
    print(iter, 'Epoch loss: {:.4f}'.format(gen_epoch_loss[-1]))

    if iter % 10 == 0 or iter == args.n_epochs:
        net.eval()
        acc_test, loss_test = test_img(copy.deepcopy(net), dataset_test, args)
        print("Testing accuracy " + str(iter) + ": {:.2f}".format(acc_test))
        # if args.wandb:
        #     wandb.log({
        #         "Communication round": iter,
        #         "Local model " + str(i) + " test accuracy": acc_test
        #     })
# gen_loss = sum(gen_epoch_loss) / len(gen_epoch_loss)

optimizer = torch.optim.SGD(net.parameters(), lr=lr, momentum=args.momentum, weight_decay=args.weight_decay)
epoch_loss = []

for iter in range(1, args.n_epochs+1):
    net.train()
    batch_loss = []
    
    for batch_idx, (images, labels) in enumerate(ldr_train):
        images, labels = images.to(args.device), labels.to(args.device)
        net.zero_grad()
        logits, log_probs = net(images)
        loss = F.cross_entropy(logits, labels)
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        batch_loss.append(loss.item())
    epoch_loss.append(sum(batch_loss)/len(batch_loss))
    print(iter, 'Epoch loss: {:.4f}'.format(epoch_loss[-1]))

    if iter % 10 == 0 or iter == args.n_epochs:
        net.eval()
        acc_test, loss_test = test_img(copy.deepcopy(net), dataset_test, args)
        print("Testing accuracy " + str(iter) + ": {:.2f}".format(acc_test))
        # if args.wandb:
        #     wandb.log({
        #         "Communication round": iter,
        #         "Local model " + str(i) + " test accuracy": acc_test
        #     })
