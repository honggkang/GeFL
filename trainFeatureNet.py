'''
Train feature network to extract feature images
'''
import argparse
import torch.nn as nn
from torch.utils.data import DataLoader
import os
import copy

from utils.getData import *
from models.mlp import *
from models.cnn import *
from utils.util import test_img

parser = argparse.ArgumentParser()
parser.add_argument('--num_users', type=int, default=100)
parser.add_argument('--noniid', action='store_true') # default: false
parser.add_argument('--dir_param', type=float, default=0.3)

parser.add_argument('--frac', type=float, default=0.1)
parser.add_argument('--bs', type=int, default=32)
parser.add_argument("--batch_size", type=int, default=32, help="size of the batches")

parser.add_argument('--local_bs', type=int, default=32)
parser.add_argument('--momentum', type=float, default=0)
parser.add_argument('--local_ep', type=int, default=5)

parser.add_argument('--weight_decay', type=float, default=0)
parser.add_argument('--mode', type=str, default='normal') # normal worst
parser.add_argument('--rs', type=int, default=0)
parser.add_argument('--num_classes', type=int, default=10)

parser.add_argument('--num_experiment', type=int, default=3, help="the number of experiments")
parser.add_argument('--device_id', type=str, default='0')
parser.add_argument('--pretrained', type=bool, default=False)
parser.add_argument('--wandb', type=bool, default=False)

parser.add_argument('--dataset', type=str, default='mnist') # stl10, cifar10, svhn, mnist
parser.add_argument('--models', type=str, default='cnn') # cnn, mlp

parser.add_argument('--name', type=str, default='under_dev') # L-A: bad character
parser.add_argument("--n_epochs", type=int, default=20, help="number of epochs of training")

args = parser.parse_args()
args.device = 'cuda:' + args.device_id

# common_net = FE_MLP().to(args.device)
common_net = FE_CNN().to(args.device)
# net = MLP3().to(args.device)
net = CNN3().to(args.device)

loss_func = nn.CrossEntropyLoss()

dataset_train, dataset_test = getDataset(args)
lr = 1e-1 # MLP

tf = transforms.Compose([transforms.ToTensor(), transforms.Grayscale()]) # mnist is already normalised 0 to 1 / imageFolder loads data by 3 channels
dataloader = DataLoader(dataset_train, batch_size=args.batch_size, shuffle=True)
optimizer = torch.optim.SGD(net.parameters(), lr=lr, momentum=args.momentum, weight_decay=args.weight_decay)

epoch_loss = []
# print('gen sample iteration',self.iter)
for iter in range(1, args.n_epochs+1): # train by samples generated by generator
    net.train()
    batch_loss = []
    for i, (imgs, labels) in enumerate(dataloader):
        imgs, labels = imgs.to(args.device), labels.to(args.device)
        net.zero_grad()
        logits, log_probs = net(imgs)
        loss = F.cross_entropy(logits, labels) # net.fc1.weight.grad / net.fc5.weight.grad
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        batch_loss.append(loss.item())
    epoch_loss.append(sum(batch_loss)/len(batch_loss))
    print(iter, 'Epoch loss: {:.4f}'.format(epoch_loss[-1]))

    if iter % 10 == 0 or iter == args.n_epochs:
        net.eval()
        acc_test, loss_test = test_img(copy.deepcopy(net), dataset_test, args)
        # if acc_test > best_perf[i]:
        #     best_perf[i] = float(acc_test)            
        print("Testing accuracy " + str(iter) + ": {:.2f}".format(acc_test))
        # if args.wandb:
        #     wandb.log({
        #         "Communication round": iter,
        #         "Local model " + str(i) + " test accuracy": acc_test
        #     })
fin_loss = sum(epoch_loss) / len(epoch_loss)

w_comm = common_net.state_dict()
w = net.state_dict()

for key in w_comm:
    w_comm[key] = w[key]

torch.save(w_comm, 'models/save/' + 'CNN_common_net.pt')