'''
Train the classifier network by
samples generated by feature generator
'''

import argparse
import torch.nn as nn
from torch.utils.data import DataLoader

from modelsMNIST.GAN import *
from modelsMNIST.VAE import *
from modelsMNIST.DDPM import *

from FeatureExtractor.mlp import *
from FeatureExtractor.cnn3 import *

from utils.util import test_img
from utils.getData import *
import copy
import torchsummary

parser = argparse.ArgumentParser()
parser.add_argument("--n_fepochs", type=int, default=0, help="number of epochs of training")
parser.add_argument("--n_epochs", type=int, default=50, help="number of epochs of training")

parser.add_argument("--batch_size", type=int, default=32, help="size of the batches")
parser.add_argument("--bs", type=int, default=128, help="size of the batches")
parser.add_argument('--device_id', type=str, default='0')
parser.add_argument('--dataset', type=str, default='svhn') # stl10, cifar10, svhn, mnist
parser.add_argument('--models', type=str, default='cnn') # cnn, mlp 

parser.add_argument('--gen', type=str, default='gan') # gan, vae, ddpm

# parser.add_argument("--lr", type=float, default=0.0002, help="adam: learning rate")
# parser.add_argument("--b1", type=float, default=0.5, help="adam: decay of first order momentum of gradient")
# parser.add_argument("--b2", type=float, default=0.999, help="adam: decay of first order momentum of gradient")
parser.add_argument("--n_cpu", type=int, default=8, help="number of cpu threads to use during batch generation")

parser.add_argument("--latent_dim", type=int, default=100, help="dimensionality of the latent space") # GAN
parser.add_argument("--latent_size", type=int, default=20, help="dimensionality of the latent space") # VAE
parser.add_argument("--n_feat", type=int, default=128) # DDPM
parser.add_argument("--n_T", type=int, default=5) # DDPM

parser.add_argument("--n_classes", type=int, default=10, help="number of classes for dataset")

parser.add_argument("--img_size", type=int, default=14, help="size of each image dimension")
parser.add_argument("--channels", type=int, default=1, help="number of image channels")
parser.add_argument("--sample_interval", type=int, default=20, help="interval between image sampling")

parser.add_argument('--momentum', type=float, default=0)
parser.add_argument('--weight_decay', type=float, default=0)

args = parser.parse_args()
args.device = 'cuda:' + args.device_id
args.img_shape = (args.channels, args.img_size, args.img_size)

lr = 1e-1 # MLP

if args.gen == 'gan':
    gennet = Generator(args).to(args.device)
    gennet.load_state_dict(torch.load('models/save/F1_400gan_generator.pt'))
elif args.gen == 'vae':
    gennet = CVAE(args).to(args.device)
    gennet.load_state_dict(torch.load('models/save/F1_400cvae.pt'))
elif args.gen == 'ddpm':
    gennet = DDPM(nn_model=ContextUnet(in_channels=1, n_feat=args.n_feat, n_classes=args.n_classes), betas=(1e-4, 0.02), n_T=400, device=args.device, drop_prob=0.1).to(args.device)
    gennet.load_state_dict(torch.load('models/save/1_100_ddpm.pt'))

net = CNN3().to(args.device)
# torchsummary.summary(net, (1,28,28))
torchsummary.summary(net, (3,32,32))

# common_net = FE_MLP().to(args.device)

# w_net = net.state_dict()
# w_comm = torch.load('models/save/common_net.pt') # common_net = FE_MLP.to(args.device)
# for key in w_comm:
#     w_net[key] = w_comm[key]
# net.load_state_dict(w_net)
# common_net.load_state_dict(w_comm)
# common_net.eval()

loss_func = nn.CrossEntropyLoss()
dataset_train, dataset_test = getDataset(args)

ldr_train = DataLoader(dataset_train, batch_size=args.batch_size, shuffle=True)
optimizer = torch.optim.SGD(net.parameters(), lr=lr, momentum=args.momentum, weight_decay=args.weight_decay)
epoch_loss = []
for iter in range(1,args.n_epochs+1): # train by samples generated by generator
    net.train()
    batch_loss = []

    for batch_idx, (images, labels) in enumerate(ldr_train):
        images, labels = images.to(args.device), labels.to(args.device)
        net.zero_grad()
        logits, log_probs = net(images)
        loss = F.cross_entropy(logits, labels) # net.fc1.weight.grad / net.fc5.weight.grad
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        batch_loss.append(loss.item())
    epoch_loss.append(sum(batch_loss)/len(batch_loss))
    print(iter, 'Epoch loss: {:.4f}'.format(epoch_loss[-1]))

    if iter % 5 == 0 or iter == args.n_epochs:
        net.eval()
        acc_test, loss_test = test_img(copy.deepcopy(net), dataset_test, args)
        # if acc_test > best_perf[i]:
        #     best_perf[i] = float(acc_test)            
        print("Testing accuracy " + str(iter) + ": {:.2f}".format(acc_test))
        # if args.wandb:
        #     wandb.log({
        #         "Communication round": iter,
        #         "Local model " + str(i) + " test accuracy": acc_test
        #     })


# optimizer = torch.optim.SGD(net.parameters(), lr=lr, momentum=args.momentum, weight_decay=args.weight_decay)
# batch_iter = len(dataset_train)//args.batch_size # MNIST

# gen_epoch_loss = []
# gennet.eval()
# for iter in range(1, args.n_fepochs+1): # train by samples generated by generator
#     net.train()
#     gen_batch_loss = []

#     for i in range(batch_iter):
#         with torch.no_grad():
#             images, labels = gennet.sample_image(args) # images.shape (bs, feature^2)
#         net.zero_grad()
#         logits, log_probs = net(images.view(-1,args.img_size**2), start_layer='feature')
#         loss = F.cross_entropy(logits, labels) # net.fc1.weight.grad / net.fc5.weight.grad
#         optimizer.zero_grad()
#         loss.backward()
#         optimizer.step()

#         gen_batch_loss.append(loss.item())
#     gen_epoch_loss.append(sum(gen_batch_loss)/len(gen_batch_loss))
#     print(iter, 'Epoch loss: {:.4f}'.format(gen_epoch_loss[-1]))

#     if iter % 10 == 0 or iter == args.n_fepochs or iter == 1:
#         net.eval()
#         acc_test, loss_test = test_img(copy.deepcopy(net), dataset_test, args)
#         # if acc_test > best_perf[i]:
#         #     best_perf[i] = float(acc_test)            
#         print("Testing accuracy " + str(iter) + ": {:.2f}".format(acc_test))
#         # if args.wandb:
#         #     wandb.log({
#         #         "Communication round": iter,
#         #         "Local model " + str(i) + " test accuracy": acc_test
#         #     })
# try:
#     gen_loss = sum(gen_epoch_loss) / len(gen_epoch_loss)
# except:
#     gen_loss = None